{"meta":{"title":"Oceania's","subtitle":"Just writing somethings!","description":"oceania | blog | web | vps | hexo","author":"oceania ( 吴 洲洋 )","url":"http://www.wuzhouyang.cn"},"pages":[],"posts":[{"title":"golang map类型数据反射转为对应struct类型数据","slug":"go-map-to-struct","date":"2017-04-18T07:35:26.000Z","updated":"2017-04-18T11:08:47.000Z","comments":true,"path":"go-map-to-struct/","link":"","permalink":"http://www.wuzhouyang.cn/go-map-to-struct/","excerpt":"","text":"其实 map 类型已经能满足需求了，只不过取值的时候需要通过属性字面量取值，而且感觉不符合面向对象、强类型的思路，所以记录一下如何将 map 结构数据转化为 struct 类型 引入包import ( \"fmt\" \"reflect\") 创建测试 struct// Person 测试结构 成员需首字母大写type Person struct &#123; Name string Age int&#125; 创建主要反射处理函数func mapReflect(item interface&#123;&#125;) Person &#123; //初始化 Person struct 数据（指针） personItem := new(Person) //得到 personItem 所指对象 ref := reflect.ValueOf(personItem).Elem() //断言，判断是否 map 结构 temp, can := item.(map[string]interface&#123;&#125;) if can &#123; for k, v := range temp &#123; //将 map 结构得到的属性和值 设置给 personItem ref.FieldByName(k).Set(reflect.ValueOf(v)) &#125; &#125; else &#123; personItem = nil &#125; //将指针值返回 return *personItem&#125; 来个函数打印出结果func testStruct(p Person) &#123; fmt.Println(p.Name, p.Age)&#125; main函数定义一个能与 Person Struct 相对应的 map 数据，然后就能调用主要的处理函数了func main() &#123; person := map[string]interface&#123;&#125;&#123;\"Name\": \"oceania\", \"Age\": 24&#125; testStruct(mapReflect(person))&#125; go run main.go走起，可以看到 map 数据都将直接通过 struct 读取出来oceania 24","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://www.wuzhouyang.cn/tags/golang/"}]},{"title":"搭建双线（github + coding）hexo博客","slug":"create-hexo-double-cname","date":"2017-04-14T08:32:14.000Z","updated":"2017-04-18T11:08:47.000Z","comments":true,"path":"create-hexo-double-cname/","link":"","permalink":"http://www.wuzhouyang.cn/create-hexo-double-cname/","excerpt":"","text":"啰嗦因为买了自己的 vps，所以有捣鼓过搭博客的经验。之前搭建过 Wordpress 、Jekyll，说实在, Wordpress 更像是一套完善的程序，只要简单在 vps 上搭建 LNMP 或者等等环境，就能在 web 中通过界面操作和写文章，主题之类的也非常多，之前为了主题选了很久而且自己修改了一些，后来发现我的重心偏离了，浪费了太多时间，而且 Wordpress 的优点也是缺点–臃肿。之后听说 Jekyll 不错，与 Wordpress 不同的是 Jekyll 是静态页面工具，轻量、速度快，而且支持 markdown，所以我又捣鼓了一下，个人觉得它的命令比较杂，而且依赖 ruby， mac 上还好， window 上捣鼓真心烦。所以最终转向了 Hexo，依赖 Node.js，有着 jekyll 的优点，实乃前端必备啊。不多说了，下面贴出搭建 Hexo 以及配置双线的方法还有心得。 Github PagesGithub Page 就是我们必须用到的服务了，可以看看官方的说法： GitHub Pages allow you to publish web content to a github.com subdomain named after your username. With Pages, publishing web content becomes as easy as pushing to your GitHub repository. 也就是说我们可以通过其服务来将我们的博客托管到其服务器上，Github 还提供子域名供解析。我们只要把博客 push 到仓库，就能随时更新自己的博客了。 新建 Github Pages 仓库 请先拥有一个 Github 账户！点击右上角头像新建一个仓库 仓库的名称必须是 用户名.github.io，这是 Github Pages 规定的，为了方便测试，也勾选了使用 README.MD 初始化选项 接下来在项目中新建一个 index.html 进行测试 打开浏览器访问 username.github.io 就可以看到 index.html 的内容了 配置 GitHub 对应的密钥 window 下使用 Git Bash，Mac 和 Linux 使用 terminal因为使用 Hexo 都是一键部署的，而且为了实现一键部署到多个托管平台，所以这里是用 ssh 连接远程，关于详细配置私钥和迷钥的可以参考另一篇博文《git ssh 的私钥与公钥》，这里直接贴代码 生成 ssh 密钥ssh-keygen -t rsa -f ~/.ssh/github 得到一堆密钥，私钥为 github，公钥为 github.pub，可以列出查看ls -a ~/.ssh 添加 config 配置文件,并通过 vi 编辑touch ~/.ssh/config &amp; vi ~/.ssh/config 填写相关的配置信息到 config 中,注意有缩进Host github HostName github.com IdentityFile ~/.ssh/github 复制公钥 github.pub 内容部署到 Github 的 ssh key 上面 添加完成后会看到 ssh keys 列表 测试 ssh 到 GitHub 的连接ssh -T git@github 测试成功会看到如下到提示 至此，GitHub pages 服务算是已经简单搭好了 Coding PagesCoding Pages 是国内代码托管平台，为了实现双线搭建 Hexo，我把国内线路的访问托管到 Coding 上面，所以请先注册一个 coding 账户，新建一个 Coding Pages 项目仓库，为了直接能使用username.coding.me域名，名称必须与自己的账户名一样 打开项目，初始化一下仓库 添加一个 index.html 方便测试 打开侧边栏的Pages 服务，将master作为部署分支，保存即可 打开浏览器，即可成功访问 username.coding.me 配置 Coding 密钥通过 ssh 连接 Coding 时也需要进行认证，同样的需要配置对应 Coding 的密钥ssh-keygen -t rsa -f ~/.ssh/coding 添加 config 配置Host coding HostName git.coding.net IdentityFile ~/.ssh/coding 复制公钥 coding.pub 的内容部署到 Coding 服务端 没什么问题即可通过 ssh 连接测试ssh -T git@coding 创建 Hexo 博客 确保安装了 Git 和 Node.js 安装 Hexo-clinpm install hexo-cli -g 确保安装了 Hexo-cli，查看版本，看到版本信息即证明安装成功hexo -v cd到想要储存博客文件夹的目录路径，初始化一个 Hexo 博客，这里我命名为oceania_bloghexo init oceania_blog Hexo 3.0 init 的时候已经会自动安装依赖了，如果发现根目录没有 node_modules 文件夹，可以手动安装依赖cd oceania_blog &amp; npm install 接下来直接使用 Hexo 自带命令就能本地预览你的博客了hexo s 浏览器打开 localhost:4000，可以看到一个简单的博客已经展现出来 部署 Hexo 到 GitHub Pages博客根目录先安装插件依赖npm install hexo-deployer-git --save 打开博客根目录的 Hexo 配置文件 _config.yml，找到 deploy 节点并添加配置deploy:- type: git repo: github: git@github:wuzhouyang/wuzhouyang.github.io.git name: wuzhouyang email: oceaniawzy@gmail.com branch: master 由于我在.ssh/config文件中写的是别名，也就是github对应的是主机github.com，而仓库本来的连接是git@github.com:wuzhouyang/wuzhouyang.github.io.git，所以必须把连接改为git@github:wuzhouyang/wuzhouyang.github.io.git这里的name和email主要是 git 提交的用户信息，将会被显示在提交人那里，方便开发人员清楚提交人信息，如果不填的话会默认查找全局的 git 配置中的user.name和user.email，如果在全局的配置中也没有相关信息，则会直接使用所在电脑主机的用户名和主机名 现在，可以使用命令直接部署生成的博客到服务器端了hexo d 可以看到 git 已经是提交成功了 GitHub 的仓库中已经有了新生成的博客文件，打开浏览器访问对应的域名 username.github.io，可以看到博客已经被正常解析 部署 Hexo 到 Coding同样的在 Coding 上获取项目对应的 ssh 地址，然后在博客的_config.yml找到deploy节点完善配置deploy:- type: git repo: github: git@github:wuzhouyang/wuzhouyang.github.io.git coding: git@coding:wuzhouyang/wuzhouyang.git name: wuzhouyang email: oceaniawzy@gmail.com branch: master 最好先清除一下缓存rm -rf .deploy_githexo clean 然后就执行hexo d能正确同时部署到 Coding 平台上了，可打开username.coding.me看看最终效果 域名解析到这里，其实一个简单的个人博客已经实现了，也能同时部署到两个平台上，但是貌似部署到两个平台上后并没有什么用啊，访问的时候还是得分不同的域名，所以，下面就记录一下让这些不同的域名指向你自己域名的方法，实现双线访问，也就是海外访问时实际使用的是 GitHub 的域名指向，而国内访问时使用的是 Coding 的域名指向 首先你得拥有一个自己的域名 到域名商控制台上添加域名解析，我的是在阿里云上面设置 简单说明一下，CANME记录类型呢是将域名解析到另一个域名，因为这里我们必须把username.github.io和username.coding.me解析到自己的域名上，所以使用此记录类型；主机记录@代表空，例如我的域名为wuzhouyang.cn，便可以直接解析识别，主机记录www代表可以解析识别www.wuzhouyang.cn，这样以来，无论是输入哪一个，都会解析到同样的地址中；解析线路分海外和国内，海外主要设置 GitHub 的域名，国内主要设置 Coding 的域名 配置完成后即可访问自己的域名了，但是会发现无论是国内还是海外的情况下，都返回了404 接下来就来解决此问题 GitHub 的方法主要是添加一个CNAME文件供识别，在博客的source文件夹下新建一个CNAME文件，不带任何后缀，内容输入自己的顶级域名，我的就是wuzhouyang.cn，然后清空一下 Hexo 缓存后提交部署hexo clean hexo d 完成后即可全局翻墙访问自己的域名看看能不能正确解析 Coding 平台提供了绑定域名的功能，只需到项目的控制台的 Pages服务 中设置即可，好处是可以绑定多个域名 然后就可以回墙内试试自己的域名能不能访问了 如果要求证双线路是否正确配置了，可以用在线 DNS 查询结果 看到多个不同的域名则证明成功了 做记录有些累，先到此，以后再做修改","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://www.wuzhouyang.cn/tags/github/"},{"name":"coding","slug":"coding","permalink":"http://www.wuzhouyang.cn/tags/coding/"},{"name":"hexo","slug":"hexo","permalink":"http://www.wuzhouyang.cn/tags/hexo/"}]},{"title":"git ssh 的私钥与公钥","slug":"git-key","date":"2017-04-06T02:39:53.000Z","updated":"2017-04-18T11:08:47.000Z","comments":true,"path":"git-key/","link":"","permalink":"http://www.wuzhouyang.cn/git-key/","excerpt":"","text":"在 github 或者 coding 中如果我们要 clone 一个项目通常有两种方式，一种是用过 https 直接 git clone 下来，这种方式的 clone 不用经过账户验证即可完成，但是在每次 push 的时候都会要求输入正确的账户与密码（当然，可以通过某些模式和配置来实现只需要一次输入，参考另一篇短记录《mac 下 git 通过 https 传输的疑惑》）；一种是用过 ssh 方式 clone，这种方式的 clone 要求你是项目的相关负责人，也就是说必须通过相关的验证才能正确的 clone 下来，然后在每次 push 的时候都不用输入账户和密码，而这种验证方式则是用过配置公钥与私钥来完成。 生成私钥与公钥window 用户需要打开 git bash，mac 和 linux直接使用自带 terminal 即可。可以先看看此前有没有已经存在相关的密钥ls -a ~/.ssh 如果并没有看到关于 id_rsa、id_rsa.pub 相关内容，那么可以放心接下来的步骤，如果是已经存在了，证明你已经弄过了，有必要的话也可以删除重来实验一次，反正结果都是不会影响到什么的。主要以 GitHub 为例。为了实验，我清空了本机里面所有已有的密钥，并且在 GitHub 上新建一个用于测试的仓库。如图复制了新仓库的 ssh 链接 打开 terminal 或者 git bash 选择合适的文件夹路径试图进行 clone，不出意料会得到如下阻拦信息 这里主要的报错是下面这句而不是那个警告： Permission denied (publickey). 可以知道，公钥验证失败。接下来就让我们来生成一对密钥。主要用到 ssh-keygen 命令ssh-keygen -t rsa -f ~/.ssh/github -t 代表加密类型，一般为rsa，-f为自定义文件名，这里的 github 就是密钥储存的文件名，最好把 ~/.ssh/路径加上，或者你必须到用户的.ssh 目录下执行此操作出现输入密码提示的地方直接回车即可，这里密码用于以后链接 ssh 的时候输入，也没有这种必要，所以就直接enter键跳过了 完成后在.ssh文件夹下会生成一对密钥ls ~/.ssh github 就是新生成的私钥，github.pub 就是新生成的公钥。公钥主要用于部署到服务器端，私钥主要用于解密服务器端通过公钥加密的数据，所以，接下来我们需要将公钥部署到 GitHub 上面去，来到 GitHub 控制台到 setting 中，创建一个 ssh key 复制新生成的公钥的内容到控制台的 key 中，title随便填，无所谓.就像下图 因为这只是公钥内容，不怕泄漏，所以也就可以贴出来。 处理私钥接下来就可以测试一下能不能正确地链接 GitHub 了，输入ssh -T git@github.com 出现错误了，还是公钥验证失败 这是因为我在生成密钥的时候修改了默认的文件名，默认是生成 id_rsa 还有 id_rsa.pub 两个文件，git 查找私钥的时候会寻找此名称的文件，所以被改名后自然是找不到私钥来解密了。那该如何才能识别呢，我试了一下，有两种方案。 ssh-add 第一种，是通过 ssh-add 将私钥添加进 ssh-agent 密钥管理器保管，git 解密服务端公钥将交给 ssh-agent 完成 ssh-add ~/.ssh/github 再测试一下 ssh 链接便可以正确链接 config文件 第二种，是通过 .ssh 下的 config 文件来设置对应的私钥 为了验证，请讲 ssh-add 添加的私钥清空。查看添加的私钥列表ssh-add -l 清空私钥列表ssh-add -D 为 .shh 文件夹添加 config 文件touch ~/.ssh/config 编辑 config 文件vi ~/.ssh/config 添加主要配置Host github HostName github.com IdentityFile ~/.ssh/github :wq 退出后测试链接，可以看到也能成功连接了简单解释一下，Host是一个简称，主要映射HostName，而IdentityFile则是私钥文件的位置，也就是说，测试连接的时候可以换成以下的命令ssh -T git@github 主机名 github 会自动转化为 github.com 不难想，通过 config 这种方案可以简单地配置多账户、多托管平台的 ssh key，所以我自己是采用了这种方式。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://www.wuzhouyang.cn/tags/git/"},{"name":"github","slug":"github","permalink":"http://www.wuzhouyang.cn/tags/github/"},{"name":"coding","slug":"coding","permalink":"http://www.wuzhouyang.cn/tags/coding/"}]},{"title":"mac 下 git 通过 https 传输的疑惑","slug":"mac-git-https-osxkeychain","date":"2017-04-05T05:48:23.000Z","updated":"2017-04-18T11:08:47.000Z","comments":true,"path":"mac-git-https-osxkeychain/","link":"","permalink":"http://www.wuzhouyang.cn/mac-git-https-osxkeychain/","excerpt":"","text":"都说 git 通过 https 方式 clone 下来的项目要 push 的话每次都需要输入验证自己的账户和密码，但是据我在自己的 Mac 上操作，并不是如此，让我心生疑惑，我 push 的时候貌似只有第一次需要输入自己相关对应的账户和密码（无论 github 还是 coding），之后的每次提交都会直接完成。本着好奇的心里，我还是翻了翻 git 的文档，发现原来对于 https ，git 还有凭证存储这一说： 幸运的是，Git 拥有一个凭证系统来处理这个事情。 下面有一些 Git 的选项： 默认所有都不缓存。 每一次连接都会询问你的用户名和密码。 “cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除。 “store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。 如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中。 这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的。 如果你使用的是 Windows，你可以安装一个叫做 “winstore” 的辅助工具。 这和上面说的 “osxkeychain” 十分类似，但是是使用 Windows Credential Store 来控制敏感信息。 可以在 https://gitcredentialstore.codeplex.com 下载。 osxkeychain由于使用的是 Mac，可能是符合上面几点所说的 “osxkeychain” 模式，可以直接看看事实是不是如此：git config credential.helper 可以看到果然应用了 osxkeychain 模式 我想可能是 Mac 下 git 的默认配置就是如此。那什么是 osxkeychain 模式呢，其实，从名字上就可以判断出这种模式是依赖于 osx 上的 keychain，也就是钥匙串 钥匙串是 Mac 内置的密码管理工具，各种程序的密码在某些条件下会自动被钥匙串收录，所以可以很简单地知道 git 在 osxkeychain 模式下是会在第一次输入验证账户密码的时候将相关密码信息存储到了钥匙串中。打开钥匙串可以很清晰地看到我自己的 GitHub 和 coding 中存储的信息 上面清楚写着存储的时间，也就知道了最近一次输入验证是什么时候。为了验证此钥匙串是不是就是 git 自动填写的密码，我把其中一个 coding.net 的删掉，再通过 https 方式 push coding 上的项目，果不其然，我必须填写账户信息了 最后，git 文档说钥匙串储存的密码是加密的，我通过右键选项将密码 copy 到粘贴板 然后会要求输入电脑账户的密码，最终粘贴到别的地方，得到的却是明文密码。但是这并不是个大疑惑，或许文档说的加密是指需要通过电脑主机账户的验证，毕竟如果擅自将密码给加密了，那就肯定无法通过 github 或者是 coding 的验证了。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://www.wuzhouyang.cn/tags/git/"},{"name":"github","slug":"github","permalink":"http://www.wuzhouyang.cn/tags/github/"},{"name":"coding","slug":"coding","permalink":"http://www.wuzhouyang.cn/tags/coding/"},{"name":"mac","slug":"mac","permalink":"http://www.wuzhouyang.cn/tags/mac/"}]}]}